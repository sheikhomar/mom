/*
Develop a transport system consisting of stations and segments.

R1: A segment can have one or two stations. 
R2: There are four types of stations: checkin, checkout, connecting and unknown
R3: A checkin station can only have outgoing segments
R4: A checkout station can only have incoming segments
R5: A connecting station can have both incoming and outgoing segments
R6: The station with one station has station type unknown

*/

class Transport

types

StationType = <CheckIn> | <Checkout> | <Connecting> | <Unknown>;

Station :: type: StationType;

Segment :: src: [Station]
           dst: [Station];

values

validSegments : set of Segment = {
  mk_Segment(mk_Station(<Unknown>), nil),
  mk_Segment(nil, mk_Station(<Unknown>)),
  mk_Segment(mk_Station(<CheckIn>), mk_Station(<Connecting>)),
  mk_Segment(mk_Station(<Connecting>), mk_Station(<Connecting>)),
  mk_Segment(mk_Station(<Connecting>), mk_Station(<Checkout>))
}

operations

public Run : () ==> ()
Run() ==
  for all seg in set validSegments
  do let - = Add(seg) in skip; 

functions

Add : Segment -> bool
Add(seg) ==
  (
    true
  )
pre
  R1(seg) and
  R2(seg) and
  R3(seg) and
  R4(seg) and
  R5(seg) and
  R6(seg);

R1 : Segment -> bool
R1(seg) ==
  (seg.src = nil and seg.dst <> nil) or
  (seg.src <> nil and seg.dst = nil) or
  (seg.src <> nil and seg.dst <> nil);

R2 : Segment -> bool
R2(seg) ==
  true; -- No need to check for R2

-- R3: A checkin station can only have outgoing segments
R3 : Segment -> bool
R3(seg) ==
  seg.src <> nil and seg.dst <> nil => seg.dst.type <> <CheckIn>;

-- R4: A checkout station can only have incoming segments
R4 : Segment -> bool
R4(seg) ==
  seg.src <> nil and seg.dst <> nil => seg.src.type <> <Checkout>;

-- R5: A connecting station can have both incoming and outgoing segments
R5 : Segment -> bool
R5(seg) ==
  true;

-- R6: The station with one station has station type unknown
R6 : Segment -> bool
R6(seg) ==
  (seg.src = nil and seg.dst <> nil) => seg.dst.type = <Unknown> and
  (seg.src <> nil and seg.dst = nil) => seg.src.type = <Unknown>;


traces

T1:
  let seg in set validSegments
  in Add(seg);

end Transport
