class Station is subclass of Global

instance variables

protected id : StationID;
protected name : seq1 of char;
protected segments : set of Segment;
protected currentTote : [Tote] := nil;

operations

public Station : StationID * seq1 of char ==> Station
Station(pId, pName) ==
  (
    id := pId;
    name := pName;
    segments := {};
  );

pure public CanProcess : () ==> bool
CanProcess() == return currentTote = nil;

public Process : Tote ==> ()
Process(pTote) == currentTote := pTote
pre CanProcess();

public Step : () ==> ()
Step() == is subclass responsibility;

pure public GetId : () ==> StationID
GetId() == return id;

pure public GetName : () ==> seq of char
GetName() == return name;

public AddSegment : Segment ==> ()
AddSegment(pSegment) == segments := segments union { pSegment }
pre pSegment.HasStation(self);

pure public GetCurrentTote : () ==> [Tote]
GetCurrentTote() ==
  return currentTote;

pure public Equals: Station ==> bool
Equals(pOtherStation) ==
  return id = pOtherStation.id;

functions

protected GetInSegments : StationID * set of Segment -> set of Segment
GetInSegments(pCurrentStationId, pSegments) ==
  { s | s in set pSegments & s.IsTargetStation(pCurrentStationId) };

protected GetOutSegments : StationID * set of Segment -> set of Segment
GetOutSegments(pCurrentStationId, pSegments) ==
  { s | s in set pSegments & s.IsSourceStation(pCurrentStationId) };

end Station
