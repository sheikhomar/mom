class Environment

instance variables

busy : bool := false;
private transport : BaggageTransport;

operations

public Environment: () ==> Environment
Environment () ==
  (
    busy := true;
    transport := BaggageTransport`LoadSampleLayout1();
  );


public Run: () ==> ()
Run () == 
  let 
    tote1 = new Tote(1, 10),
    tote2 = new Tote(2, 10)
  in (
    dcl station : Station;
    dcl retVal : bool;
    dcl output : seq of char;
    output := "[";

    IO`print("Initial config: \n\n");
    station := transport.GetStation("CheckIn1");
    station.Process(tote1);
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();
--
    IO`print("Step 1: \n\n");
    station := transport.GetStation("CheckIn2");
    station.Process(tote2);
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    IO`print("Step 2: \n\n");
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    IO`print("Step 3: \n\n");
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    IO`print("Step 4: \n\n");
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    IO`print("Step 5: \n\n");
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    IO`print("Step 6: \n\n");
    output := output ^ transport.ToJSON() ^ ", ";
    transport.Step();

    output := output ^ " { } ";
    output := output ^ "]";
    IO`print(output);
    retVal := IO`fwriteval[seq of char]("generated/simulation.json", output, <start>);
  );


end Environment