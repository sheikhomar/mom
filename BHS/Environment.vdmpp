class Environment is subclass of Global

types

public StationName = seq of char;
public Signal = StationName * Tote * Baggage;

values


instance variables

private system : BHS;
private outputPath : seq of char;

private signals : seq of [Signal] := [
  nil, -- nil means that no signal is fired at step i
  mk_("CheckIn1", BHS`tote1, new Baggage(<Beijing>)),
  mk_("CheckIn2", BHS`tote2, new Baggage(<London>, {<BadTag>})),
  mk_("CheckIn1", BHS`tote3, new Baggage(<NewYork>, {<FailsSecurityL1>})),
  mk_("CheckIn2", BHS`tote4, new Baggage(<Copenhagen>)),
  nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
];


operations

public Environment: BHS * seq of char ==> Environment
Environment (pSystem, pOutputPath) ==
  (
    system := pSystem;
    outputPath := pOutputPath;
  );

public Run: () ==> ()
Run() ==
  (
    dcl output : seq of char := "[";
    for signal in signals
    do
      (
        IO`print("[Time " ^ VDMUtil`val2seq_of_char[nat](World`timer.GetCurrentTime()) ^ "] ");
        if signal <> nil
        then
          let mk_(stationName, tote, baggage) = signal
          in
            (
              IO`print("Introducing baggage in " ^ stationName ^ ". ");
              tote.Load(baggage);
              system.GetStation(stationName).Process(tote);
            )
         else
           (
             IO`print("No signal in this step. ");
           );
        output := output ^ system.ToJSON() ^ ", ";
        IO`print("Stepping... \n");
        system.Step();
        World`timer.AdvanceTime();
      );

    output := output ^ " { } ";
    output := output ^ "]";
    let - = IO`fwriteval[seq of char](outputPath, output, <start>)
    in skip;
  );

end Environment
