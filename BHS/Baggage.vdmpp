class Baggage is subclass of Global

types

public Attribute = <BadTag> | <FailsSecurityL1>;

instance variables

private attributes : set of Attribute;
private destination : FlightDestination;

operations

public Baggage : FlightDestination ==> Baggage
Baggage(pDest) == 
  (
    attributes := {};
    destination := pDest;
  );

public Baggage : FlightDestination * set1 of Attribute ==> Baggage
Baggage(pDest, pInitialAttributes) == 
  (
    attributes := pInitialAttributes;
    destination := pDest;
  );

public SetAttr : Attribute ==> ()
SetAttr(pAttr) == 
  attributes := attributes union { pAttr }
pre not pAttr in set attributes;

pure public HasAttr : Attribute ==> bool
HasAttr(pAttr) ==
  return pAttr in set attributes;

public RemoveAttr : Attribute ==> ()
RemoveAttr(pAttr) ==
  attributes := attributes \ { pAttr }
pre pAttr in set attributes;

public pure GetDestination : () ==> FlightDestination
GetDestination() == return destination;

end Baggage
