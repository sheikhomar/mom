class BHS is subclass of Global

instance variables

public static tote1 : Tote := new Tote(1, 10);
public static tote2 : Tote := new Tote(2, 10);
public static tote3 : Tote := new Tote(3, 10);
public static tote4 : Tote := new Tote(4, 10);

private stations : map seq of char to Station;
private segments : set of Segment;


operations

public BHS: () ==> BHS
BHS() ==
  (
    stations := { |-> };
    segments := {};
  );

public GetStation : seq of char ==> Station
GetStation(pStationName) ==
  return stations(pStationName);

public AddStation : Station ==> ()
AddStation(pStation) ==
  (
    stations := stations munion { pStation.GetName() |-> pStation };
  );
-- TODO: Precondition, ensure that station id does not exit

public AddSegment : Segment ==> ()
AddSegment(pSegment) ==
  (
    segments := segments union { pSegment };
  );
-- TODO: Add precondition to ensure that 
-- 1) A segment with the same from and to station cannot exist
-- 2) Two segments with the same set of stations cannot exist

public Step : () ==> ()
Step() ==
  (
    for all station in set rng stations
    do station.Step();

    for all segment in set segments
    do segment.Step();
  );

public ToJSON : () ==> seq of char
ToJSON() ==
  (
    dcl data : seq of char := "";
    data := data ^ "{ \"stations\": [";
    data := data ^ ConvertStationsToJSON(rng stations);
    data := data ^ "], \"segments\": [";
    data := data ^ ConvertSegmentsToJSON(segments);
    data := data ^ "]}";
    return data;
  );

private pure ConvertSegmentsToJSON : set of Segment ==> seq of char
ConvertSegmentsToJSON(pSegments) ==
  (
    dcl data : seq of char := "";
    if pSegments <> {}
    then (
      let segment in set pSegments in
      let
        nextJson = ConvertSegmentsToJSON(pSegments \ { segment }),
        source = segment.GetSourceStation(),
        target = segment.GetTargetStation(),
        length = segment.GetLength(),
        totePositions = segment.GetTotePositions()
      in (
        data := data ^ "{ \"source\": \"" ^ source.GetName() ^ "\",";
        data := data ^ " \"target\": \"" ^ target.GetName() ^ "\",";
        data := data ^ " \"length\": " ^ VDMUtil`val2seq_of_char[nat](length) ^ ",";
        data := data ^ " \"totes\": [";
        data := data ^ ConvertTotePositionsToJSON(totePositions);
        data := data ^ "]}";
        if nextJson <> ""
        then data := data ^ ", " ^ nextJson;
      );
    );
    return data;
  );

private pure ConvertStationsToJSON : set of Station ==> seq of char
ConvertStationsToJSON(pStations) ==
  (
    dcl data : seq of char := "";
    if pStations <> {}
    then (
      let station in set pStations in
      let
        nextJson = ConvertStationsToJSON(pStations \ { station }),
        tote = station.GetCurrentTote()
      in (
        data := data ^ "{ \"name\": \"" ^ station.GetName() ^ "\"";
        data := data ^ ", \"totes\": [";
        if tote <> nil
        then data := data ^ " { \"id\": " ^ VDMUtil`val2seq_of_char[nat](tote.GetId()) ^ " }";
        data := data ^ "]";
        data := data ^ "}";

        if nextJson <> ""
        then data := data ^ ", " ^ nextJson;
      );
    );
    return data;
  );

private pure ConvertTotePositionsToJSON : seq of Segment`TotePosition ==> seq of char
ConvertTotePositionsToJSON(pTotePositions) ==
  (
    dcl data : seq of char := "";
    if pTotePositions <> []
    then (
     let
        totePos = pTotePositions(1),
        nextJson = ConvertTotePositionsToJSON(tl pTotePositions),
        toteId = VDMUtil`val2seq_of_char[nat](totePos.Tote.GetId()),
        position = VDMUtil`val2seq_of_char[nat](totePos.Position)
      in (
        data := "{ \"id\": " ^ toteId ^ ", \"position\": " ^ position ^ "}";
        if nextJson <> ""
        then data := data ^ ", " ^ nextJson;
      );
    );
    return data;
  );

end BHS
