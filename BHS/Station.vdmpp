class Station
types

public StationID = nat

values
-- TODO Define values here

instance variables

private name : seq1 of char;
private id : StationID;
protected segments : set of Segment;

operations


public Station : StationID * seq1 of char ==> Station
Station(pId, pName) ==
  (
    id := pId;
    name := pName;
    segments := {};
  );

pure public CanProcess : () ==> bool
CanProcess() == is subclass responsibility;

public Process : Tote ==> bool
Process(tote) == is subclass responsibility
pre CanProcess(); -- TODO: Are pre-conditions inherited?

public Step : () ==> ()
Step() == is subclass responsibility;

pure public GetId : () ==> StationID
GetId() == return id;

pure public GetName : () ==> seq of char
GetName() == return name;

public AddSegment : Segment ==> ()
AddSegment(pSegment) == segments := segments union { pSegment }
pre pSegment.HasStation(self);






functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Station