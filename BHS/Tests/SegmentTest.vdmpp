class SegmentTest is subclass of TestCase

instance variables

private source : [Station] := nil;
private target : [Station] := nil;
private segment : [Segment] := nil;
private tote1 : [Tote] := nil;
private tote2 : [Tote] := nil;
private tote3 : [Tote] := nil;
private tote4 : [Tote] := nil;

operations

public setUp : () ==> ()
setUp() ==
  (
    source := new CheckInStation(mk_token(1), "Checkin");
    target := new DischargeStation(mk_token(2), "Discharge");
    segment := new Segment(source, target, 25);
    tote1 := new Tote(1455, 10);
    tote2 := new Tote(7375, 10);
    tote3 := new Tote(5432, 10);
    tote4 := new Tote(4242, 10);
  );


/*
 * Tests for the Constructor
 */
public TestCtorAssignsSegmentsToStations : () ==> ()
TestCtorAssignsSegmentsToStations() ==
  (
    let s1 : Segment = new Segment(source, target, 25) in
    (
      Assert`assertTrue(s1.GetSourceStation().GetId() = source.GetId());
      Assert`assertTrue(s1.GetTargetStation().GetId() = target.GetId());
    )
  );


/*
 * Tests for Segment.CanProcess(Tote)
 */

public TestCanProcessWhenSegmentIsEmpty : () ==> ()
TestCanProcessWhenSegmentIsEmpty() ==
  (
    Assert`assertTrue(segment.CanProcess(tote1));
    Assert`assertTrue(segment.CanProcess(tote2));
  );

public TestCanProcessWhenRearToteIsInTheWay : () ==> ()
TestCanProcessWhenRearToteIsInTheWay() ==
  (
    segment.Process(tote1);
    Assert`assertFalse(segment.CanProcess(tote2));
  );


/*
 * Tests for Segment.UpdateTotePositions(nat)
 */

public TestUpdateTotePositionsWhenPositionChangeIsWithinSegmentDistance : () ==> ()
TestUpdateTotePositionsWhenPositionChangeIsWithinSegmentDistance() ==
  (
    segment.Process(tote1);
    segment.UpdateTotePositions(10);
    let newPos = segment.GetTotePositions()(1).Position
    in Assert`assertTrue(newPos = 20);
  );

public TestUpdateTotePositionsWhenPositionChangeLandsOnTheEdge : () ==> ()
TestUpdateTotePositionsWhenPositionChangeLandsOnTheEdge() ==
  (
    segment.Process(tote1);
    segment.UpdateTotePositions(15);
    let newPos = segment.GetTotePositions()(1).Position
    in Assert`assertTrue(newPos = 25);
  );

public TestUpdateTotePositionsWhenPositionChangeIsLargerThanSegmentDistance : () ==> ()
TestUpdateTotePositionsWhenPositionChangeIsLargerThanSegmentDistance() ==
  (
    segment.Process(tote1);
    segment.UpdateTotePositions(30);
    let newPos = segment.GetTotePositions()(1).Position
    in Assert`assertTrue(newPos = 25);
  );

public TestUpdateTotePositionsMultipleUpdates : () ==> ()
TestUpdateTotePositionsMultipleUpdates() ==
  (
    segment.Process(tote1);
    segment.UpdateTotePositions(5);
    segment.UpdateTotePositions(5);
    let newPos = segment.GetTotePositions()(1).Position
    in Assert`assertTrue(newPos = 20);
  );

public TestUpdateTotePositionsMultipleTotes : () ==> ()
TestUpdateTotePositionsMultipleTotes() ==
  (
    segment.Process(tote1);
    segment.UpdateTotePositions(10);
    segment.Process(tote2);
    segment.UpdateTotePositions(10);
    let tote1Pos = segment.GetTotePositions()(1).Position
    in Assert`assertTrue(tote1Pos = 25);
    let tote2Pos = segment.GetTotePositions()(2).Position
    in Assert`assertTrue(tote2Pos = 15);
  );




/*
 * Tests for Segment.Step()
 */
public TestStep : () ==> ()
TestStep() ==
  (
    Assert`assertTrue(segment.CanProcess(tote1));
    segment.Process(tote1);
    segment.Step();
    Assert`assertTrue(target.CanProcess());
    Assert`assertTrue(segment.CanProcess(tote2));
    segment.Process(tote2);
    segment.Step();
    Assert`assertTrue(target.CanProcess());
    Assert`assertFalse(segment.CanProcess(tote3));
    segment.Step();
    Assert`assertFalse(target.CanProcess());
    Assert`assertTrue(segment.CanProcess(tote3));
    segment.Process(tote3);
    segment.Step();
    Assert`assertFalse(segment.CanProcess(tote4));
    segment.Step();
    Assert`assertFalse(segment.CanProcess(tote4));
  );

end SegmentTest