class CheckinStationTest is subclass of TestCase

instance variables

private checkInStation : [CheckInStation] := nil;
private segment : [Segment] := nil;
private tote1 : [Tote] := nil;
private tote2 : [Tote] := nil;

operations

public setUp : () ==> ()
setUp() ==
  let
    source = new CheckInStation(mk_token(1), "Checkin"),
    target = new DischargeStation(mk_token(2), "Discharge"),
    s = new Segment(source, target, 25)
  in (
    checkInStation := source;
    segment := s;
    tote1 := new Tote(1455, 10);
    tote2 := new Tote(1455, 10);
  );

/*
 * Tests for CanProcess()
 */
public TestCanProcessWhenNothingIsBeingProcessing : () ==> ()
TestCanProcessWhenNothingIsBeingProcessing() ==
  (
    Assert`assertTrue(checkInStation.CanProcess());
  );

public TestCanProcessWhenToteIsProcessing : () ==> ()
TestCanProcessWhenToteIsProcessing() ==
  (
    Assert`assertTrue(checkInStation.CanProcess());
    checkInStation.Process(tote1);
    Assert`assertFalse(checkInStation.CanProcess());
  );

/*
 * Tests for Step()
 */
public TestStepWhenNotProcessing : () ==> ()
TestStepWhenNotProcessing() ==
  (
    Assert`assertTrue(segment.CanProcess(tote1));
    Assert`assertTrue(checkInStation.CanProcess());
    -- Nothing should happen
    checkInStation.Step();
    Assert`assertTrue(segment.CanProcess(tote1));
    Assert`assertTrue(checkInStation.CanProcess());
  );

public TestStepWhenProcessing : () ==> ()
TestStepWhenProcessing() ==
  (
    Assert`assertTrue(checkInStation.CanProcess());
    checkInStation.Process(tote1);
    Assert`assertTrue(segment.CanProcess(tote2));
    checkInStation.Step();
    Assert`assertTrue(checkInStation.CanProcess());
    Assert`assertFalse(segment.CanProcess(tote2));
  );

end CheckinStationTest
