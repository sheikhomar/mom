-- Represents transportation system. It is a directed graph 
-- where stations are represented as nodes and segments 
-- between stations are represented as edges.
class BaggageTransport is subclass of Global
types

public TransportLayout = seq of Station * seq1 of (seq1 of nat);


values

public SampleLayout1 : TransportLayout = mk_(
  [
    new Station(1, "CheckIn1"),
    new Station(2, "CheckIn2"),
    new Station(3, "Combiner1")
  ],
  [
    [0, 0, 30],
    [0, 0, 20],
    [0, 0,  0]
  ]
)

instance variables

private stations : map nat to Station;
private segments : set of Segment;


operations

public BaggageTransport: () ==> BaggageTransport
BaggageTransport() ==
  (
    stations := { |-> };
    segments := {};
  );


public static LoadSampleLayout1 : () ==> BaggageTransport
LoadSampleLayout1() ==
  return Load(SampleLayout1);

public static Load : TransportLayout ==> BaggageTransport
Load(layout) == 
  (
    dcl bt : BaggageTransport := new BaggageTransport();
    def mk_(stationSeq, distanceMatrix) = layout in
    (
      for station in stationSeq do
      (
        bt.AddStation(station);
      );
      for all i in set inds distanceMatrix do
      (
        for all j in set inds distanceMatrix(i) do
        (
          if distanceMatrix(i)(j) <> 0 
          then (
            dcl s1 : Station := stationSeq(i);
            dcl s2 : Station := stationSeq(j);
            dcl distance : nat1 := distanceMatrix(i)(j);
            dcl segment : Segment := 
              new Segment(s1, s2, distance);
            bt.AddSegment(segment);
            skip;
          );
        );
      );
    );
    return bt;
  );


public AddStation : Station ==> ()
AddStation(pStation) ==
  (
    stations := stations munion { pStation.GetId() |-> pStation };
  );
-- TODO: Precondition, ensure that station id does not exit

public AddSegment : Segment ==> ()
AddSegment(pSegment) ==
  (
    segments := segments union { pSegment };
  );
-- TODO: Add precondition to ensure that 
-- 1) A segment with the same from and to station cannot exist
-- 2) Two segments with the same set of stations cannot exist

functions

traces
-- TODO Define Combinatorial Test Traces here
end BaggageTransport