class Segment is subclass of Global

types

TotePosition :: Tote : Tote
                Position : nat

instance variables

private source : Station;
private target : Station;
private distance : Distance;
private totePositions : seq of TotePosition;

operations

public Segment : Station * Station * Distance  ==> Segment
Segment(pSourceStation, pTargetStation, pDistance) ==
  (
    source := pSourceStation;
    target := pTargetStation;
    distance := pDistance;

    -- Back reference
    source.AddSegment(self);
    target.AddSegment(self);

    totePositions := [];
  )
-- Ensure that source and destination stations are different.
pre pSourceStation.GetId() <> pTargetStation.GetId();

public pure GetSourceStation : () ==> Station
GetSourceStation() == return source;

public pure GetTargetStation : () ==> Station
GetTargetStation() == return target;

-- Determines whether the given station is on this segment.
public pure HasStation : Station ==> bool
HasStation(pStation) ==
  return pStation.GetId() = source.GetId() or
         pStation.GetId() = target.GetId();

public pure IsSource : Station ==> bool
IsSource(pStation) ==
  return pStation.GetId() = source.GetId();

public pure IsTarget : Station ==> bool
IsTarget(pStation) ==
  return pStation.GetId() = target.GetId();

public pure CanProcess : Tote ==> bool
CanProcess(pTote) ==
  return len totePositions = 0 or
    let tp = totePositions(len totePositions)
    in tp.Position - tp.Tote.GetLength() >= pTote.GetLength();

public Process : Tote ==> ()
Process(pTote) ==
  (
    let tp = mk_TotePosition(pTote, pTote.GetLength())
    in totePositions := totePositions ^ [ tp ];
  )
pre
  -- Ensure that the given tote is not already on the segment
  forall tp in seq totePositions & tp.Tote.GetId() <> pTote.GetId()
  -- And we can actually process the tote.
  and CanProcess(pTote);

public Step : () ==> ()
Step() ==
  (
    for i = len totePositions to 1 by -1 do
      let
        tp = totePositions(i),
        newPosition = tp.Position + tp.Tote.GetLength()
      in
        totePositions(i) := mk_TotePosition(tp.Tote, newPosition);

    -- TODO:
    -- 1) Find the next tote to process
    -- 2) If the target station can process the tote
    -- 3)   Call TargetStation.Process(tote)
    -- 4)   Remove tote from the segment
    -- 5) Change the position of all totes
  );

public pure GetRearTote : () ==> Tote
GetRearTote() ==
  return totePositions(len totePositions).Tote
pre len totePositions > 0;

end Segment