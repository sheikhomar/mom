class Segment is subclass of Global

values

PositionChangePerStep = 10

instance variables

private source : Station;
private target : Station;
private length : Length;
private totePositions : seq of TotePosition;

operations

public Segment : Station * Station * Length  ==> Segment
Segment(pSourceStation, pTargetStation, pDistance) ==
  (
    source := pSourceStation;
    target := pTargetStation;
    length := pDistance;
    source.AddSegment(self);
    target.AddSegment(self);
    totePositions := [];
  )
-- Ensure that source and destination stations are different.
pre not pSourceStation.Equals(pTargetStation);

public pure GetSourceStation : () ==> Station
GetSourceStation() == return source;

public pure GetTargetStation : () ==> Station
GetTargetStation() == return target;

-- Determines whether the given station is on this segment.
public pure HasStation : Station ==> bool
HasStation(pStation) ==
  return pStation.GetId() = source.GetId() or
         pStation.GetId() = target.GetId();

public pure IsSourceStation : Station ==> bool
IsSourceStation(pStation) ==
  return source.GetId() = pStation.GetId();

public pure IsSourceStation : Station`StationID ==> bool
IsSourceStation(pStationID) ==
  return source.GetId() = pStationID;

public pure IsTargetStation : Station ==> bool
IsTargetStation(pStation) ==
  return target.GetId() = pStation.GetId();

public pure IsTargetStation : Station`StationID ==> bool
IsTargetStation(pStationId) ==
  return target.GetId() = pStationId;

public pure GetLength : () ==> Length
GetLength() == return length;

public pure Equals : Segment ==> bool
Equals(pOtherSegment) ==
  return source.GetId() = pOtherSegment.source.GetId() and
         target.GetId() = pOtherSegment.target.GetId()  and
         length = pOtherSegment.length;

public pure CanProcess : Tote ==> bool
CanProcess(pTote) ==
  return len totePositions = 0 or
    let tp = totePositions(len totePositions)
    in tp.Position - tp.Tote.GetLength() >= pTote.GetLength();

public Process : Tote ==> ()
Process(pTote) ==
  (
    let tp = mk_TotePosition(pTote, 0)
    in totePositions := totePositions ^ [ tp ];
  )
pre
  -- Ensure that the given tote is not already on the segment
  forall tp in seq totePositions & tp.Tote.GetId() <> pTote.GetId()
  -- And we can actually process the tote.
  and CanProcess(pTote);

public Step : () ==> ()
Step() ==
  (
    if
      len totePositions > 0 -- We have totes on this segment
      and totePositions(1).Position = length -- The rear tote has reach the end of the segment
      and target.CanProcess() -- The target station can process totes
    then
      let rear = totePositions(1)
      in (
          target.Process(rear.Tote);
          totePositions := tl totePositions;
        );
    UpdateTotePositions(PositionChangePerStep);
  );

public UpdateTotePositions : nat ==> ()
UpdateTotePositions(positionDelta) ==
  for i = 1 to len totePositions by 1
  do
    let tp = totePositions(i)
    in
      (
        dcl newPosition : nat;
        dcl maxPos : nat;

        -- Compute the farthest position for this tote
        if i <> 1
        then
          let nextTp = totePositions(i-1)
          in maxPos := nextTp.Position - nextTp.Tote.GetLength()
        else maxPos := length;

        -- Compute new position
        if tp.Position + positionDelta > maxPos
        then newPosition := maxPos
        else newPosition := tp.Position + positionDelta;

        -- Update new position
        totePositions(i) := mk_TotePosition(tp.Tote, newPosition);
      );

-- Made for testing
public pure GetTotePositions : () ==> seq of TotePosition
GetTotePositions() == return totePositions;

end Segment